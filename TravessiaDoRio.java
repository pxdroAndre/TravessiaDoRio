import java.util.Scanner;

/**
 * Solu√ß√£o em Java para o problema da Travessia do Rio (Fazendeiro, Lobo, Ovelha e Couve).
 * O c√≥digo √© uma tradu√ß√£o direta do pseudoc√≥digo fornecido.
 */
public class TravessiaDoRio {

    // Vari√°veis para armazenar a posi√ß√£o de cada elemento ('e' para esquerda, 'd' para direita)
    private static String fazendeiro;
    private static String lobo;
    private static String ovelha;
    private static String couve;

    /**
     * Fun√ß√£o principal que executa o programa.
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // --- Leitura do estado inicial ---
        System.out.println("--- CONFIGURA√á√ÉO INICIAL ---");
        System.out.print("Digite a posi√ß√£o inicial do Fazendeiro (e/d): ");
        fazendeiro = scanner.nextLine().toLowerCase();

        System.out.print("Digite a posi√ß√£o inicial do Lobo (e/d): ");
        lobo = scanner.nextLine().toLowerCase();

        System.out.print("Digite a posi√ß√£o inicial da Ovelha (e/d): ");
        ovelha = scanner.nextLine().toLowerCase();

        System.out.print("Digite a posi√ß√£o inicial da Couve (e/d): ");
        couve = scanner.nextLine().toLowerCase();

        // Identifica e mostra o estado inicial
        String estado = identificarEstado(fazendeiro, lobo, ovelha, couve);
        System.out.println("\nEstado inicial: " + estado);
        System.out.println("---------------------------\n");


        // Verifica se a configura√ß√£o inicial j√° representa um perigo
        verificarPerigo(fazendeiro, lobo, ovelha, couve);

        // --- Loop de movimentos ---
        while (true) {
            System.out.println("Posi√ß√µes atuais -> Fazendeiro: " + fazendeiro + ", Lobo: " + lobo + ", Ovelha: " + ovelha + ", Couve: " + couve);
            System.out.print("Digite o movimento (OD, OE, LD, LE, CD, CE, FD, FE ou 'fim' para sair): ");
            String movimento = scanner.nextLine().toUpperCase(); // Converte para mai√∫sculas para facilitar a compara√ß√£o

            if (movimento.equals("FIM")) {
                System.out.println("Fim do programa.");
                break; // Sai do loop
            }

            // A l√≥gica de movimento √© tratada em um m√©todo separado para organiza√ß√£o
            aplicarMovimento(movimento);

            // Verifica o perigo ap√≥s o movimento
            verificarPerigo(fazendeiro, lobo, ovelha, couve);

            // Mostra o novo estado
            estado = identificarEstado(fazendeiro, lobo, ovelha, couve);
            System.out.println(">>> Novo estado: " + estado + "\n");

            // Verifica se o jogador venceu
            if (estado.equals("F8")) {
                System.out.println("üéâ PARAB√âNS! Voc√™ conseguiu atravessar todos com seguran√ßa! üéâ");
                break;
            }
        }

        scanner.close(); // Boa pr√°tica fechar o scanner ao final
    }

    /**
     * Mapeia a configura√ß√£o das posi√ß√µes para um nome de estado.
     * Corresponde √† fun√ß√£o identificarEstado do pseudoc√≥digo.
     */
    public static String identificarEstado(String faz, String lob, String ove, String cou) {
        // Usa String.format para criar a chave de estado de forma mais limpa
        String estadoAtual = String.format("%s,%s,%s,%s", faz, lob, ove, cou);

        switch (estadoAtual) {
            case "e,e,e,e" -> {
                return "F1 (In√≠cio)";
            }
            case "d,e,d,e" -> {
                return "F2";
            }
            case "e,e,d,e" -> {
                return "F3";
            }
            case "d,e,e,d" -> {
                return "F4";
            }
            case "e,e,e,d" -> {
                return "F5";
            }
            case "d,d,e,e" -> {
                return "F6";
            }
            case "e,d,e,e" -> {
                return "F7";
            }
            case "d,d,d,d" -> {
                return "F8 (Vit√≥ria)";
            }
            // F9 √© id√™ntico a F2 no seu pseudoc√≥digo
            // case "d,e,d,e": return "F9";
            case "e,d,e,d" -> {
                return "F10";
            }
            case "d,d,e,d" -> {
                return "F11";
            }
            case "e,d,d,e" -> {
                return "F12";
            }
            default -> {
                return "Configura√ß√£o inv√°lida";
            }
        }
    }

    /**
     * Verifica se uma condi√ß√£o de derrota foi atingida.
     * Corresponde √† fun√ß√£o verificarPerigo do pseudoc√≥digo.
     * Se uma condi√ß√£o de perigo √© encontrada, o programa √© encerrado.
     */
    public static void verificarPerigo(String faz, String lob, String ove, String cou) {
        // Se o fazendeiro est√° na esquerda, o perigo est√° na margem direita
        if (faz.equals("e")) {
            if (lob.equals("d") && ove.equals("d")) {
                System.out.println("\nüíÄ PERDEU! O lobo comeu a ovelha na margem direita!");
                System.exit(0); // Encerra o programa
            }
            if (ove.equals("d") && cou.equals("d")) {
                System.out.println("\nüíÄ PERDEU! A ovelha comeu a couve na margem direita!");
                System.exit(0); // Encerra o programa
            }
        }
        // Se o fazendeiro est√° na direita, o perigo est√° na margem esquerda
        else if (faz.equals("d")) {
            if (lob.equals("e") && ove.equals("e")) {
                System.out.println("\nüíÄ PERDEU! O lobo comeu a ovelha na margem esquerda!");
                System.exit(0); // Encerra o programa
            }
            if (ove.equals("e") && cou.equals("e")) {
                System.out.println("\nüíÄ PERDEU! A ovelha comeu a couve na margem esquerda!");
                System.exit(0); // Encerra o programa
            }
        }
    }

    /**
     * Processa a l√≥gica de movimento baseada na entrada do usu√°rio.
     */
    private static void aplicarMovimento(String mov) {
        switch (mov) {
            // Levar a Ovelha para a Direita
            case "OD":
                if (fazendeiro.equals("e") && ovelha.equals("e")) {
                    ovelha = "d"; fazendeiro = "d";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e a ovelha devem estar na esquerda.");
                }
                break;
            // Levar a Ovelha para a Esquerda
            case "OE":
                if (fazendeiro.equals("d") && ovelha.equals("d")) {
                    ovelha = "e"; fazendeiro = "e";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e a ovelha devem estar na direita.");
                }
                break;
            // Levar o Lobo para a Direita
            case "LD":
                if (fazendeiro.equals("e") && lobo.equals("e")) {
                    lobo = "d"; fazendeiro = "d";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e o lobo devem estar na esquerda.");
                }
                break;
            // Levar o Lobo para a Esquerda
            case "LE":
                if (fazendeiro.equals("d") && lobo.equals("d")) {
                    lobo = "e"; fazendeiro = "e";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e o lobo devem estar na direita.");
                }
                break;
            // Levar a Couve para a Direita
            case "CD":
                if (fazendeiro.equals("e") && couve.equals("e")) {
                    couve = "d"; fazendeiro = "d";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e a couve devem estar na esquerda.");
                }
                break;
            // Levar a Couve para a Esquerda
            case "CE":
                if (fazendeiro.equals("d") && couve.equals("d")) {
                    couve = "e"; fazendeiro = "e";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro e a couve devem estar na direita.");
                }
                break;
            // Levar apenas o Fazendeiro para a Direita
            case "FD":
                if (fazendeiro.equals("e")) {
                    fazendeiro = "d";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro j√° est√° na direita.");
                }
                break;
            // Levar apenas o Fazendeiro para a Esquerda
            case "FE":
                if (fazendeiro.equals("d")) {
                    fazendeiro = "e";
                } else {
                    System.out.println("Movimento inv√°lido! O fazendeiro j√° est√° na esquerda.");
                }
                break;
            default:
                System.out.println("Comando de movimento inv√°lido!");
                break;
        }
    }
}
